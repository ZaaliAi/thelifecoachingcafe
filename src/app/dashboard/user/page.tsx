"use client";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useAuth } from "@/lib/auth";
import { navItems } from '../../../config/navConfig'; // Updated path
import type { NavItem } from '../../../config/navConfig'; // Updated path
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { LogOut, Loader2, MessageSquare, UserCircle, Search } from "lucide-react";
import { cn } from '@/lib/utils';
import { Button } from "@/components/ui/button"; // Keep button if used by existing cards
import { getMessagesForUserOrCoach } from "@/lib/messageService"; // Import the message service function


export default function UserDashboardPage() {
  const { user, logout, loading } = useAuth(); // Added logout
  const [userName, setUserName] = useState("Valued User");
  // The following state is for the existing "Messages" card, which might be re-added by navItems or kept separate.
  // For now, let's assume it might be dynamically generated by navItems if 'My Messages' is a navItem.
  // If not, this specific logic might need to be merged or handled differently.
  // const [unreadMessageCount, setUnreadMessageCount] = useState(0);
  // const [isLoadingMessages, setIsLoadingMessages] = useState(true);


  useEffect(() => {
    if (user) {
      setUserName(user.name || user.email?.split('@')[0] || "User");
      // Message fetching logic can remain if there's a separate messages display area,
      // or be removed if messages are only accessed via a nav card.
      // For now, commenting out to avoid conflict with generic nav card generation.
      /*
      const fetchUnreadMessages = async () => {
        setIsLoadingMessages(true);
        try {
          const allMessages = await getMessagesForUserOrCoach(user.id);
          const unreadCount = allMessages.filter(
            (msg) => msg.recipientId === user.id && !msg.read
          ).length;
          setUnreadMessageCount(unreadCount);
        } catch (error) {
          console.error("Failed to fetch unread messages for dashboard:", error);
          setUnreadMessageCount(0);
        } finally {
          setIsLoadingMessages(false);
        }
      };
      fetchUnreadMessages();
      */
    }
  }, [user]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[calc(100vh-200px)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }
  
  if (!user) {
    return <p>Please log in to view your dashboard.</p>;
  }

  const accessibleNavItems = navItems.filter(item =>
    item.roles.includes('user') &&
    (!item.requiresPremium || user.subscriptionTier === 'premium')
  );

  return (
    <div className="space-y-8">
      <Card>
        <CardHeader>
          <CardTitle className="text-3xl">Welcome, {userName}!</CardTitle>
          <CardDescription>This is your personal dashboard. Manage your interactions and find your ideal coach.</CardDescription>
        </CardHeader>
      </Card>

      {/* Navigation Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {accessibleNavItems.map((item) => (
          <Link href={item.href} key={item.href} passHref legacyBehavior>
            <a className="block hover:no-underline focus:outline-none focus:ring-2 focus:ring-primary rounded-lg">
              <Card className="h-full hover:shadow-md transition-shadow duration-150 ease-in-out flex flex-col items-center justify-center p-6 text-center">
                <item.icon className="h-10 w-10 mb-3 text-primary" />
                <CardTitle className="text-lg font-semibold">{item.label}</CardTitle>
              </Card>
            </a>
          </Link>
        ))}

        {/* Logout Card */}
        {user && (
           <div
             onClick={logout}
             className="block hover:no-underline focus:outline-none focus:ring-2 focus:ring-destructive rounded-lg cursor-pointer"
             tabIndex={0} // Make it focusable
             onKeyPress={(e) => e.key === 'Enter' && logout()} // Keyboard accessible
           >
            <Card className="h-full hover:shadow-md transition-shadow duration-150 ease-in-out flex flex-col items-center justify-center p-6 text-center text-destructive border-destructive/50 hover:bg-destructive/5">
              <LogOut className="h-10 w-10 mb-3" />
              <CardTitle className="text-lg font-semibold">Logout</CardTitle>
            </Card>
          </div>
        )}
      </div>

      {/* Example of a specific card that was there before - "Find a New Coach" */}
      {/* This section can be used for other specific content or removed if navItems cover all */}
      {/* For this task, we assume navItems will cover necessary navigation including "Find a coach" if it's a navItem */}
      {/* The original "Messages" card with unread count might need special handling if that feature is desired outside generic nav */}


      <Card>
        <CardHeader>
          <CardTitle>Activity Overview</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">Your recent searches and saved coaches will appear here (feature coming soon).</p>
        </CardContent>
      </Card>
    </div>
  );
}
