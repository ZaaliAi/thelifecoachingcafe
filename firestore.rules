rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // USER PROFILES (/users/{userId})
    match /users/{userId} {
      allow read: if request.auth.uid == userId ||
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                   (resource.data.role == 'coach' && resource.data.status == 'approved') ||
                   (request.auth != null && resource.data.role == 'user'); // Authenticated users can read 'user' profiles

      allow create: if request.auth.uid == userId &&
                     request.resource.data.email == request.auth.token.email &&
                     (request.resource.data.role == 'user' || request.resource.data.role == 'coach');

      allow update: if request.auth.uid == userId ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // BLOGS (/blogs/{blogId})
    match /blogs/{blogId} {
      allow read: if resource.data.status == 'published' ||
                     request.auth.uid == resource.data.authorId ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth.uid == request.resource.data.authorId &&
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if request.auth.uid == resource.data.authorId ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth.uid == resource.data.authorId ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // MESSAGES (/messages/{messageId})
    match /messages/{messageId} {
      allow read: if request.auth.uid == resource.data.senderId ||
                     request.auth.uid == resource.data.recipientId;

      allow create: if request.auth.uid == request.resource.data.senderId &&
                       request.resource.data.senderId != null &&
                       request.resource.data.recipientId != null &&
                       request.resource.data.content != null &&
                       request.resource.data.senderName != null &&
                       request.resource.data.recipientName != null;

      allow update: if request.auth.uid == resource.data.recipientId &&
                       request.resource.data.read == true &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);

      allow delete: if false;
    }

    // CONVERSATIONS (/conversations/{conversationId})
    match /conversations/{conversationId} {
      allow read, write: if request.auth.uid in resource.data.members;
      // If messages are a subcollection of conversations:
      // match /messages/{messageId} {
      //   allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.members;
      // }
    }
  }
}
