rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isNotSuspended() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status != 'suspended';
    }

    // Blog posts: Public read, only authenticated users can write
    match /posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // User profiles: Public read, user can write their own profile, admin can write any profile
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null &&
                      ((request.auth.uid == userId && isNotSuspended()) || // User can write their own profile IF not suspended
                       // Admins can write any profile, regardless of status. No isNotSuspended check needed here.
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Messages Rules
    match /messages/{messageId} { // Rule for individual document access
      allow read: if request.auth != null &&
                     (resource.data.senderId == request.auth.uid ||
                      resource.data.recipientId == request.auth.uid ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
 // && isNotSuspended(); // You might want to add this if creating messages should also be restricted for suspended users. Let's add it.
      allow update: if request.auth != null &&
                     (resource.data.recipientId == request.auth.uid ||
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && request.resource.data.keys().hasOnly(['read'])));

      // allow delete: if ... (if needed for admins)
    }

    // Separate rule specifically for LISTING the entire messages collection by an admin
    match /messages { // Note: No {messageId} wildcard here for the list rule
      allow list: if request.auth != null &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Conversations: Only members can create/read/update, no delete
    match /conversations/{conversationId} {
      allow create: if request.auth != null && isNotSuspended() && // Add suspended check
 request.resource.data.members != null &&
        request.auth.uid in request.resource.data.members &&
 (conversationId.split('_')[0] == request.auth.uid || conversationId.split('_')[1] == request.auth.uid);
      allow update: if request.auth != null && isNotSuspended() && // Add suspended check
        resource.data.members != null &&
        request.auth.uid in resource.data.members;
      allow read: if request.auth != null &&
        resource.data.members != null &&
        request.auth.uid in resource.data.members;
      allow delete: if false;
    }

    // Blogs: (if you use /blogs/{blogId})
    match /blogs/{blogId} {
      allow read: if true;
      allow write: if request.auth != null && isNotSuspended(); // Add suspended check
    }

    // Add other collections here as needed...
  }
}
