rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isNotSuspended() {
      // Check if the user document exists before trying to access its data
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status != 'suspended';
    }

    // Blog posts: Public read, only authenticated users can write
    match /posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId; // New user creating their own profile
      allow update: if request.auth != null &&
                       (
                         (request.auth.uid == userId && isNotSuspended()) || // User updating their own profile
                         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') // Admin updating any profile
                       );
      allow delete: if request.auth != null &&
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'); // Only admin can delete
    }
    
    // Stripe Products collection: Public read for products and their prices
    // Writes should be restricted (typically handled by the Stripe extension with admin-like privileges or specific service accounts)
    match /products/{productId} {
      allow read: if true;
      // Example: Allow write only by admins for manual overrides, though Stripe extension handles sync.
      allow write: if request.auth != null && 
                      (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      match /prices/{priceId} {
        allow read: if true;
        // Example: Allow write only by admins for manual overrides.
        allow write: if request.auth != null && 
                        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }
    }

    // Customers collection (for Stripe customer data linked to users)
    // Users should only be able to read their own customer data.
    // Creation and updates are typically handled by the Stripe extension.
    match /customers/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Deny client-side creation and deletion, should be handled by extension
      allow create, delete: if false; 
    }
    
    // Subscriptions and Payments subcollections under customers
    // Users should only be able to read their own subscriptions/payments.
    match /customers/{userId}/{paymentCollection}/{paymentId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Deny client-side mutations, should be handled by extension/Stripe webhooks.
        allow create, update, delete: if false;
    }

    // Messages Rules
    match /messages/{messageId} { 
      allow read: if request.auth != null &&
                     (resource.data.senderId == request.auth.uid ||
                      resource.data.recipientId == request.auth.uid ||
                      (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid && isNotSuspended();
      allow update: if request.auth != null &&
                     (resource.data.recipientId == request.auth.uid ||
                     (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
                      request.resource.data.keys().hasOnly(['read'])));
    }

    match /messages { 
      allow list: if request.auth != null &&
                     (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Conversations
    match /conversations/{conversationId} {
      allow create: if request.auth != null && isNotSuspended() && 
                       request.resource.data.members != null &&
                       request.auth.uid in request.resource.data.members &&
                       (conversationId.split('_')[0] == request.auth.uid || conversationId.split('_')[1] == request.auth.uid);
      allow update: if request.auth != null && isNotSuspended() && 
                       resource.data.members != null &&
                       request.auth.uid in resource.data.members;
      allow read: if request.auth != null &&
                     resource.data.members != null &&
                     request.auth.uid in resource.data.members;
      allow delete: if false;
    }

    // Blogs
    match /blogs/{blogId} {
      allow read: if true;
      allow write: if request.auth != null && isNotSuspended();
    }
  }
}
